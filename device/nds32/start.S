/*!******************************************************************************************/
/*!                                                                                         */
/*!                 (c) Copyright 2005-2018, Andes Techonology                              */
/*!                            All Rights Reserved                                          */
/*!                                                                                         */
/*!                             NDS32 Generic Port                                          */
/*!                              GNU C Compiler                                             */
/*!                                                                                         */
/*!******************************************************************************************/
/*!******************************************************************************************/
/*! INCLUDE ASSEMBLY CONSTANTS                                                              */
/*!******************************************************************************************/

#include <nds32_init.inc>
#include "nds32_defs.h"

#ifndef VECTOR_NUMINTRS
#define VECTOR_NUMINTRS		32
#endif

	/*! Macro for exception/interruption vectors */

	.macro VECTOR name
	.weak   trap_\name
	.set    trap_\name, default_exception_vsr
	.align 4
__vector_\name:
	push    $r0
	la      $r0, trap_\name
	jr5     $r0
	.endm

	.macro INTERRUPT num
	.align 4
__vector_HW\num:
	.if     \num == IRQ_SWI_VECTOR
	pushm   $r28,$r30
	la      $fp, FreeRTOS_SWI_Handler
	jr5     $fp
	.else
	.weak   interrupt_HW\num
	.set    interrupt_HW\num, default_interrupt_vsr
	pushm   $r0, $r5
	li      $r0, \num
	la      $r1, interrupt_HW\num
	jr5     $r1
	.endif
	.endm

/*!*******************************************************************************************/
/*!	Vector Entry Table                                                                       */
/*!*******************************************************************************************/

	/*! Define standard NDS32 vector table entry point of */
	/*! exception/interruption vectors                    */

	.section .nds32_init, "ax"

	.global exception_vectors
	.global exception_vectors_end

exception_vectors:
	/*! Exception vectors */
	b       _start              /*!  (0) Trap Reset/NMI          */
	VECTOR  TLB_Fill            /*!  (1) Trap TLB fill           */
	VECTOR  PTE_Not_Present     /*!  (2) Trap PTE not present    */
	VECTOR  TLB_Misc            /*!  (3) Trap TLB misc           */
	VECTOR  TLB_VLPT_Miss       /*!  (4) Trap TLB VLPT miss      */
	VECTOR  Machine_Error       /*!  (5) Trap Machine error      */
	VECTOR  Debug_Related       /*!  (6) Trap Debug related      */
	VECTOR  General_Exception   /*!  (7) Trap General exception  */
	VECTOR  Syscall             /*!  (8) Syscall                 */

	/*! Interrupt vectors */
	.altmacro
	.set    irqno, 0
	.rept   VECTOR_NUMINTRS
	INTERRUPT %irqno
	.set    irqno, irqno+1
	.endr

	.align 4
exception_vectors_end:

/*!********************************************************************************************/
/*!	Start Entry                                                                               */
/*!********************************************************************************************/
	.section .text
	.global _start
	.type   _start, @function
_start:
	/*!************************** Begin of do-not-modify *************************/
	/*! Initialize the registers used by the compiler                            */

	nds32_init	/*! NDS32 startup initial macro in <nds32_init.inc> */

	/*!*************************** End of do-not-modify **************************/

#ifdef CFG_CACHE_ENABLE
	/*! disable cache */
	mfsr    $r0, $CACHE_CTL
	li      $r1, ~(CACHE_CTL_mskIC_EN | CACHE_CTL_mskDC_EN)
	and     $r0, $r0, $r1
	mtsr    $r0, $CACHE_CTL
#endif

	/*! Do system low level setup. It must be a leaf function. */
	bal     _nds32_init_mem

#if 1   /* Speed prefer */

	/*! We do this on a word basis.                     */
	/*! Currently, the default linker script guarantee  */
	/*! the __bss_start/_end boundary word-aligned.     */

	/*! Clear bss */
	la      $r0, __bss_start
	la      $r1, _end
	sub     $r2, $r1, $r0       /*! $r2: Size of .bss */
	beqz    $r2, clear_end

	andi    $r7, $r2, 0x1f      /*! $r7 = $r2 mod 32 */
	movi    $r3, 0
	movi    $r4, 0
	movi    $r5, 0
	movi    $r6, 0
	movi    $r8, 0
	movi    $r9, 0
	movi    $r10, 0
	beqz    $r7, clear_loop     /*!if $r7 == 0, bss_size%32 == 0 */
	sub     $r2, $r2, $r7

first_clear:
	swi.bi  $r3, [$r0], #4      /*!clear each word */
	addi    $r7, $r7, -4
	bnez    $r7, first_clear
	li      $r1, 0xffffffe0
	and     $r2, $r2, $r1       /*!check bss_size/32 == 0 or not           */
	beqz    $r2, clear_end      /*!if bss_size/32 == 0 , needless to clear */

clear_loop:
	smw.bim $r3, [$r0], $r10    /*!clear each 8 words */
	addi    $r2, $r2, -32
	bgez    $r2, clear_loop

clear_end:
#else	/* Size prefer */
	! Clear bss
	la      $r0, _edata
	la      $r1, _end
	beq     $r0, $r1, 2f
	li      $r2, #0
1:
	swi.bi  $r2, [$r0], #4
	bne     $r0, $r1, 1b
2:
#endif

	/*! System reset handler */
	bal     reset_handler

	/*! Infinite loop, if returned accidently */
1:
	b       1b

	/* Default exceptions / interrupts handler */
default_exception_vsr:
default_interrupt_vsr:
die:	b       die
